<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Generador de Dither Halftone (Imagen y Video)</title>
  <style>
    body { font-family: sans-serif; text-align: center; padding: 20px; background: #f0f0f0; }
    .container { max-width: 900px; margin: 0 auto; }
    .controls { margin-bottom: 20px; display: flex; flex-wrap: wrap; gap: 10px; justify-content: center; }
    .controls input[type="file"],
    .controls button,
    .controls label,
    .controls input[type="range"],
    .controls input[type="color"],
    .controls input[type="checkbox"] {
      padding: 5px; font-size: 1rem;
    }
    canvas { border: 1px solid #ccc; display: block; max-width: 100%; height: auto; margin: 0 auto; background: transparent; }
    .color-picker { display: flex; align-items: center; gap: 5px; }
    label { display: flex; align-items: center; gap: 5px; }
    hr { margin: 40px 0; }
  </style>
</head>
<body>
  <div class="container">
    <h1>Transformar Imagen a Dither Halftone</h1>
    <div class="controls">
      <input type="file" id="uploadImage" accept="image/*">
      <label for="blockRangeImg">Bloque: <span id="blockSizeLabelImg">8</span> px
        <input type="range" id="blockRangeImg" min="4" max="32" value="8">
      </label>
      <div class="color-picker">
        <label for="dotColorImg">Color de puntos:</label>
        <input type="color" id="dotColorImg" value="#000000">
      </div>
      <div class="color-picker">
        <label for="bgColorImg">Color de fondo:</label>
        <input type="color" id="bgColorImg" value="#ffffff">
      </div>
      <label>
        <input type="checkbox" id="invertToggleImg">
        Invertir colores
      </label>
      <label>
        <input type="checkbox" id="transparentBgImg">
        Fondo transparente
      </label>
      <button id="downloadImage" disabled>Guardar PNG</button>
      <button id="downloadSVGImage" disabled>Exportar SVG</button>
    </div>
    <canvas id="canvasImage"></canvas>

    <hr>

    <h1>Transformar Video a Dither Halftone</h1>
    <div class="controls">
      <input type="file" id="uploadVideo" accept="video/*">
      <label for="blockRangeVid">Bloque: <span id="blockSizeLabelVid">8</span> px
        <input type="range" id="blockRangeVid" min="4" max="32" value="8">
      </label>
      <div class="color-picker">
        <label for="dotColorVid">Color de puntos:</label>
        <input type="color" id="dotColorVid" value="#000000">
      </div>
      <div class="color-picker">
        <label for="bgColorVid">Color de fondo:</label>
        <input type="color" id="bgColorVid" value="#ffffff">
      </div>
      <label>
        <input type="checkbox" id="invertToggleVid">
        Invertir colores
      </label>
      <button id="processVideo" disabled>Procesar video</button>
      <button id="downloadVideo" disabled>Guardar video</button>
    </div>
    <canvas id="canvasVideo"></canvas>
  </div>

  <script>
    // --- Función común de dither ---
    function applyDither(ctx, imageData, w, h, size, dotColor, bgColor, invert, transparentBg) {
      const fillBg = transparentBg ? null : (invert ? dotColor : bgColor);
      const fillDot = invert ? bgColor : dotColor;
      if (fillBg) {
        ctx.fillStyle = fillBg;
        ctx.fillRect(0, 0, w, h);
      } else {
        ctx.clearRect(0, 0, w, h);
      }
      ctx.fillStyle = fillDot;
      const data = imageData.data;
      for (let y = 0; y < h; y += size) {
        for (let x = 0; x < w; x += size) {
          let sum = 0, alphaSum = 0;
          for (let dy = 0; dy < size; dy++) {
            for (let dx = 0; dx < size; dx++) {
              const idx = 4 * ((y + dy) * w + (x + dx));
              sum += 0.299 * data[idx] + 0.587 * data[idx + 1] + 0.114 * data[idx + 2];
              alphaSum += data[idx + 3];
            }
          }
          if (transparentBg && alphaSum === 0) continue;
          const avg = sum / (size * size);
          const radius = (1 - avg / 255) * (size / 2);
          if (radius > 0) {
            ctx.beginPath();
            ctx.arc(x + size / 2, y + size / 2, radius, 0, 2 * Math.PI);
            ctx.fill();
          }
        }
      }
    }

    // --- Imagen ---
    (() => {
      const upload = document.getElementById('uploadImage');
      const canvas = document.getElementById('canvasImage'), ctx = canvas.getContext('2d');
      const blockRange = document.getElementById('blockRangeImg'), blockLabel = document.getElementById('blockSizeLabelImg');
      const dotColorInput = document.getElementById('dotColorImg'), bgColorInput = document.getElementById('bgColorImg');
      const invertToggle = document.getElementById('invertToggleImg'), transparentToggle = document.getElementById('transparentBgImg');
      const downloadBtn = document.getElementById('downloadImage'), downloadSVG = document.getElementById('downloadSVGImage');
      let img, hiddenCanvas, hctx;

      function processImg() {
        const size = parseInt(blockRange.value);
        blockLabel.textContent = size;
        const w = img.width - (img.width % size), h = img.height - (img.height % size);
        canvas.width = w; canvas.height = h;
        hiddenCanvas.width = w; hiddenCanvas.height = h;
        hctx.drawImage(img, 0, 0, w, h);
        const imageData = hctx.getImageData(0, 0, w, h);
        applyDither(ctx, imageData, w, h, size,
          dotColorInput.value, bgColorInput.value,
          invertToggle.checked, transparentToggle.checked);
        downloadBtn.disabled = false;
        downloadSVG.disabled = false;
      }

      upload.addEventListener('change', e => {
        const file = e.target.files[0]; if (!file) return;
        const reader = new FileReader();
        reader.onload = ev => {
          img = new Image();
          img.onload = () => { hiddenCanvas = document.createElement('canvas'); hctx = hiddenCanvas.getContext('2d'); processImg(); };
          img.src = ev.target.result;
        };
        reader.readAsDataURL(file);
      });

      [blockRange, dotColorInput, bgColorInput, invertToggle, transparentToggle].forEach(el => el.addEventListener('input', () => { if (img) processImg(); }));

      downloadBtn.addEventListener('click', () => {
        canvas.toBlob(blob => {
          const link = document.createElement('a'); link.href = URL.createObjectURL(blob);
          link.download = 'dither_image.png'; link.click(); URL.revokeObjectURL(link.href);
        }, 'image/png');
      });

      downloadSVG.addEventListener('click', () => {
        const size = parseInt(blockRange.value);
        const w = canvas.width, h = canvas.height;
        const bg = transparentToggle.checked ? null : (invertToggle.checked ? dotColorInput.value : bgColorInput.value);
        const dot = invertToggle.checked ? bgColorInput.value : dotColorInput.value;
        let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${w}\" height=\"${h}\">`;
        if (bg) svg += `<rect width=\"100%\" height=\"100%\" fill=\"${bg}\"/>`;
        const data = hctx.getImageData(0, 0, w, h).data;
        for (let y = 0; y < h; y += size) {
          for (let x = 0; x < w; x += size) {
            let sum = 0, alphaSum = 0;
            for (let dy = 0; dy < size; dy++) for (let dx = 0; dx < size; dx++) {
              const idx = 4 * ((y + dy) * w + (x + dx)); sum += 0.299 * data[idx] + 0.587 * data[idx+1] + 0.114 * data[idx+2]; alphaSum += data[idx+3];
            }
            if (transparentToggle.checked && alphaSum === 0) continue;
            const avg = sum / (size*size);
            const r = (1 - avg/255)*(size/2);
            if (r>0) svg += `<circle cx=\"${x+size/2}\" cy=\"${y+size/2}\" r=\"${r}\" fill=\"${dot}\"/>`;
          }
        }
        svg += `</svg>`;
        const blob = new Blob([svg], {type: 'image/svg+xml;charset=utf-8'});
        const link = document.createElement('a'); link.href = URL.createObjectURL(blob);
        link.download = 'dither_image.svg'; link.click(); URL.revokeObjectURL(link.href);
      });
    })();

    // --- Video --- (sin cambios) ---
    (() => {
      const upload = document.getElementById('uploadVideo');
      const canvas = document.getElementById('canvasVideo'), ctx = canvas.getContext('2d');
      const blockRange = document.getElementById('blockRangeVid'), blockLabel = document.getElementById('blockSizeLabelVid');
      const dotColorInput = document.getElementById('dotColorVid'), bgColorInput = document.getElementById('bgColorVid');
      const invertToggle = document.getElementById('invertToggleVid');
      const processBtn = document.getElementById('processVideo'), downloadBtn = document.getElementById('downloadVideo');
      let video, hiddenCanvas, hctx, mediaRecorder, chunks = [];
      upload.addEventListener('change', e => {
        const file = e.target.files[0]; if (!file) return;
        const url = URL.createObjectURL(file);
        video = document.createElement('video'); video.src = url; video.crossOrigin = 'anonymous'; video.muted = true;
        video.onloadedmetadata = () => { processBtn.disabled = false; };
      });
      function processFrame() {
        const size = parseInt(blockRange.value);
        const w = video.videoWidth - (video.videoWidth % size);
        const h = video.videoHeight - (video.videoHeight % size);
        canvas.width = w; canvas.height = h; hiddenCanvas.width = w; hiddenCanvas.height = h;
        hctx.drawImage(video, 0, 0, w, h);
        const imageData = hctx.getImageData(0, 0, w, h);
        applyDither(ctx, imageData, w, h, size,
          dotColorInput.value, bgColorInput.value, invertToggle.checked, false);
      }
      blockRange.addEventListener('input', () => blockLabel.textContent = blockRange.value);
      processBtn.addEventListener('click', () => {
        if (!video) return;
        hiddenCanvas = document.createElement('canvas'); hctx = hiddenCanvas.getContext('2d'); chunks = [];
        const stream = canvas.captureStream(); mediaRecorder = new MediaRecorder(stream, { mimeType: 'video/webm' });
        mediaRecorder.ondataavailable = e => chunks.push(e.data);
        mediaRecorder.onstop = () => {
          const blob = new Blob(chunks, { type: 'video/webm' }); downloadBtn.disabled = false;
          downloadBtn.onclick = () => { const link = document.createElement('a'); link.href = URL.createObjectURL(blob);
            link.download = 'dither_video.webm'; link.click(); URL.revokeObjectURL(link.href);
          };
        };
        mediaRecorder.start(); video.play(); (function render() {
          if (video.paused || video.ended) { mediaRecorder.stop(); return; }
          processFrame(); requestAnimationFrame(render);
        })();
      });
    })();
  </script>
</body>
</html>
